AttackBox的重构

粗看到一些困难
	API库的派生类MonoBehaviour
	使用GetComponent
	访问Transfrom
	Actor
	条件检查集合
	ActionState

想像的步骤
	在测试中创建ActionBox
	将功能都提成一般的成员函数
	准备好搬家
	新类AttackBoxLogic搬家
	在原AttackBox类上建立委托
	修复创建原AttackBox类的地方
	测试
	
真实的步骤
	B1 = 修改代码的艺术
	“护”是首要目的，有了“护”之后，重构就可以大胆了
	分析原AttackBox的职责
	
	新建测试的solution与project
	建立项目的引用关系
	添加AttackBoxTests测试类
	添加第一个测试函数testCreate
	让第一个测试函数编译通过
		发现AttackBox派生自MonoBehaviour，根本构造不出来
		分离AttackBox与MonoBehaviour的关系
			将AttackBox里面所有public的函数内容全部分离到一New****的函数里面去，参考B1.25.7
			New***的函数全是private的
			将所有的private成员变量与这些New***集中到一起
			建立一个新类AttackBoxImpl
			将所有集中在一起的New***与成员变量都剪切过去
			在AttackBox中新建AttackBoxImpl
			修复AttackBox中的函数连接关系-委托到AttackBoxImpl
			修复AttackBoxImpl中的编译错误
				调用非New开始原AttackBox中的函数，改成New开头的函数
				调用基类的函数与属性
					各种GetComponent，要让人疯了
					要引入AttackBox的GameObject进来
						这个问题让我头发都白了，试了几种方法
						对代码进行阅读，寻找灵感
						最终使用B1.25.1与B1.25.6来解决这个问题
						更换GetTransform().parent为NewGetParent()函数，为了安全，先手工替换，再改函数名
						ILikeGameObject
						LikeGameObjectImpl
						FakeLikeGameObject
						TestingAttackBoxImpl
						
						TestCreate成功
			
	第一个真正的功能测试
		找了一个简单的NewCheck来做测试
		寻找里面可以感知的地方
			Assert.AreEqual(null, f.NewGetAM());
			f.NewCheck();
			Assert.AreNotEqual(null, f.NewGetAM());
		编译 - 成功
		运行 - 失败
			错误原因：System.Security.SecurityException ECall
			到处找原因(ildasm.exe, google)，结果发现是因为代码里面使用了
				rActionInfo.GetShaftByGO
				这个类是直接从MonoBehaviour继承下来的
				当在代码里面直接使用从MonoBehaviour继承下来的类，会直接得到这个错误
				这意味着，之后的代码要把所有MonoBehaviour的东西全部消灭掉
				开始去消灭这个问题吧
				去掉MonoBehaviour的问题
		运行 - 失败
			错误原因：ActionManager,ActionInfo，都是空的
				无法创建这两个类，因为它们又是MonoBehaviour的
				为它们建立interface，在AttackBoxImpl中直接使用这些interface去操作
					改成interface之后，各种编译不过的问题，一个个的去修正
				为这些interface建立Fake对象，在测试中可以去用
		运行 - 成功
		添加f.NetGetAttack相关的测试
		运行 - 失败
			添加ShaftAttack到 TestingAttackBoxImpl内
			在测试函数里面手动设置上这个变量
		运行 - 成功
		
	添加测试TestOnTriggerEnter
		先写测试代码，对这个函数的一个预期，写上断言
		让编译通过
			为了编译通过，还是做了一点保守的重构
			接口上面也添加了几个接缝函数TypeName,NewActor
			原本还在那里想着ILikeGameObject需要做一个工厂，正式与测试使用不同的工厂
				结果重构完之后不需要了，因为ILikeGameObject的实体都是由外部传进来的，内部并没有去建立
					之前内部建立的那些，通过重载了==号之后，都消灭掉了，里面所有GO相关的代码都消失了
					不可思议
			之前搬家过来的一些public的函数，现在不需要public了，设置成private
		运行 - 失败
			继续处理内部逻辑中的问题
				ShaftAttack上面的AttackTargetType的值
				tag的值
				GetType.Name的值
		编译 - 成功
		运行 - 成功
	
	添加更多的测试，由于业务逻辑主要是在OnTriggerEnter里面，所以对它所了几种不同环境的测试，看结果是否与设想的一样
		先写测试代码
		编译通过
		运行通过
			非常快速就搞定了
			突然感觉心头空空的，石头没有了
	
	可以进行重构了
		清理函数名
		下次在处理类的时候，一定要注意找到类里面最重的职责，要去影响外面什么东西，这才是关键
			actionState.OnAttacked就是AttackBoxImpl里面最重的一个位置了
		！！！严重问题！！！重构的过程中发现，之前写的测试代码是有问题的，一些地方都没有检测到
		突然发现,没有测试到多个ActionManager的情况,当下都是用的一个公共的ActionManager,这是不对的
			开始去重构,把这个功能添加上去
			这个过程加的比较混乱,东加几行,西加几行,有点搞不清楚方向
			应该一小步一小步进行的,有测试护着也不能这么大的跨步呢
			最后全线飘红,全部测试失败了
			花了一些时间恢复了一下代码,想恢复的时候,发现代码挺难恢复的,东一下西一下改的太多了,太乱了
			明天还要继续去处理这些问题
		
	真实环境测试
		运行单元测试 - 都是绿的
		运行真实环境进行测试
		崩溃了LikeGameObjectImpl.parent函数出现异常
		修复它
		运行单元测试 - 都是绿的
		再次真实环境测试，好了
		！！！有一个问题是：出问题了，那就要把这个问题添加到单元测试里面去，可是这是真实环境的代码，怎么添加呢？

	
	
	新的类？？？整哪个呢？
		查看一下动作系统里面几个类的职责，不好确定，都很重要
		我的目的是什么？完善单元测试环境，把ActionManager给抠出来
		要不然直接抠ActionManager？有什么问题再慢慢对付？
		注意每次一小步！！！


	ActionInfo
		当前动作中Shaft信息相关查询的类
		职责分成4个部分
			1.Find return \ loop callback
				separating dynamic and static shafts from ActionInfo into a root shaft manager
			2.shaft <-> GO
			3.throw skill
			4.AttackInfo
		HOW CAN I WRITING UNIT TESTS?
			Adding class FindingShaft(Dynamic and Static) and FindingShaftTest
				1.使用查找的参数返回预期的结果
				2.异常的参数返回正确结果
			Adding class ShaftAndGo
			HOW about AttackInfo??????
		
		真实情况
			尝试着将find的功能弄出来，结果太复杂，失败了
				这次处理find的过程，等于就是做了一次草稿式重构，最后全部undo了，但对代码要了解一些了
				过程中上来就大步进行，中途把我给吓惨了
			决定先弄个简单的职责出来，shaft <-> Go
				上次的草稿重构让我对这块代码比较熟悉，把代码分离了出来，并且在有坑的地方先不去填它们，直接简单暴力处理
					BindGameObjectToShaft，之前想把里面需要的参数通过构造函数传进来，发现很困难
					然后就直接把ActionInfoImpl传进来了，管它呢
					过程中对一些public的属性把它们的set功能去掉，把对外的属性变的更加内聚，让set以显示的函数来调用，在之后考虑如何处理它们
					几个相关功能的代码不想去改它们，直接在类里面定义了相同签名的属性变量，直接返回ActionInfoImpl上面的变量
					小步进行
				处理了一下代码之后，一直没有把测试代码成功运行，感觉有点本未倒置了
					一直在那里重构，在重构的过程中都是一些比较简单的步骤，倒是不会有什么大的逻辑问题
					但是一直无法建立出测试功能出来，绑的太紧了
					现在开始去准备测试功能了
				测试功能搞定
					面对一个个困难，脑子里面就可以出来一些更有创造性的处理方案
					测试没有用什么很高级的技巧，被测代码就那么几行
				应用真实环境
					出错了，还没有错误信息，恢复到原来的代码，是正常的，说明是我的重构出问题了
					真实环境调试了一会儿，发现，只有真实环境才会执行的代码出错了
					改，但是这种问题怎么处理呢？？？
					==号，这个坑有的玩了
			接下来处理find相关的功能，原计划今天搞定全部的，失败了

	ActionState
		当前动作的各种数据信息记录、运算，可以当作Action对象
		考虑:
			1.将数据单独提成一个类?或者存放到不同的SHAFT CONTROLLER里面
				!!!要让外面可以访问到这些数据,外面有逻辑需要处理去处理,希望可以封装掉这些代码,暂还没有想法
			2.把ProcessCommon里面的内容解开,换成用ControllerShaft来管理
			3.动作更新与切换动作需要去做的一些事情,可能参看之前写的ASAction
			4.攻击命中的处理
		HOW CAN I WRITING UNIT TESTS?
			Separating a lot of ControllerShaft from ActionState, ActionState will be thin
			Separating ASAction from ActionState
			another work

	ActionManager
		动作切换的逻辑规则、条件，其它系统的关连
		考虑:
			一整套切动作相关处理
			动作系统的更新
			动作同步协议的处理


	ActorController
		按键、位移、碰撞
		考虑:
			这里有派生类!!!MonsterController,PlayerController,BulletController
			按键的处理
			方向的处理
			位移的处理
			同步的追踪
			移动的协议处理

	ActorProperty
		受伤：自定义Shaft、伤害计算、Buff、UState、血条、伤血显示，死亡

	战斗同步相关的处理???
		
		
	??????然后呢，重构？下一个测试？
	
	
-------------------------------------------------------------	
记录从【全局变量】到【抽象接口、实现】经历的过程
接口传达职责而非实现细节

解依赖，比喻为：
从现实中的类似情况中找，就是“提纯”的工作
把要解依赖的代码想像成一个融合了各种材质的方块体
现要从这个代码块分离出耦合的东西出来
	往上提
	向下拉
	独立出一块（派生替换函数）
	假物代替（接口）